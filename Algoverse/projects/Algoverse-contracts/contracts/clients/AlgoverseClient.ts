/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Algoverse","desc":"","methods":[{"name":"doMath","desc":"A method that takes two numbers and does either addition or subtraction","args":[{"name":"a","type":"uint64","desc":"The first uint64"},{"name":"b","type":"uint64","desc":"The second uint64"},{"name":"operation","type":"string","desc":"The operation to perform. Can be either 'sum' or 'difference'"}],"returns":{"type":"uint64","desc":"The result of the operation"},"actions":{"create":[],"call":["NoOp"]}},{"name":"hello","desc":"A demonstration method used in the AlgoKit fullstack template.\nGreets the user by name.","args":[{"name":"name","type":"string","desc":"The name of the user to greet."}],"returns":{"type":"string","desc":"A greeting message to the user."},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":0,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Algoverse.algo.ts:3","pc":[0]},{"teal":2,"source":"contracts\\Algoverse.algo.ts:3","pc":[1,2,3]},{"teal":3,"source":"contracts\\Algoverse.algo.ts:3","pc":[4,5,6,7,8,9,10]},{"teal":15,"source":"contracts\\Algoverse.algo.ts:3","pc":[11,12]},{"teal":16,"source":"contracts\\Algoverse.algo.ts:3","pc":[13]},{"teal":17,"source":"contracts\\Algoverse.algo.ts:3","pc":[14,15]},{"teal":18,"source":"contracts\\Algoverse.algo.ts:3","pc":[16]},{"teal":19,"source":"contracts\\Algoverse.algo.ts:3","pc":[17,18]},{"teal":20,"source":"contracts\\Algoverse.algo.ts:3","pc":[19]},{"teal":21,"source":"contracts\\Algoverse.algo.ts:3","pc":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45]},{"teal":25,"source":"contracts\\Algoverse.algo.ts:3","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[46]},{"teal":35,"source":"contracts\\Algoverse.algo.ts:11","pc":[47,48,49]},{"teal":39,"source":"contracts\\Algoverse.algo.ts:12","pc":[50,51]},{"teal":40,"source":"contracts\\Algoverse.algo.ts:12","pc":[52,53]},{"teal":41,"source":"contracts\\Algoverse.algo.ts:12","pc":[54]},{"teal":42,"source":"contracts\\Algoverse.algo.ts:11","pc":[55]},{"teal":52,"source":"contracts\\Algoverse.algo.ts:22","pc":[56,57,58]},{"teal":56,"source":"contracts\\Algoverse.algo.ts:23","pc":[59,60]},{"teal":57,"source":"contracts\\Algoverse.algo.ts:23","pc":[61,62]},{"teal":58,"source":"contracts\\Algoverse.algo.ts:23","pc":[63]},{"teal":59,"source":"contracts\\Algoverse.algo.ts:23","pc":[64,65,66]},{"teal":60,"source":"contracts\\Algoverse.algo.ts:23","pc":[67,68]},{"teal":61,"source":"contracts\\Algoverse.algo.ts:23","pc":[69,70]},{"teal":62,"source":"contracts\\Algoverse.algo.ts:23","pc":[71]},{"teal":63,"source":"contracts\\Algoverse.algo.ts:23","pc":[72,73,74]},{"teal":66,"source":"contracts\\Algoverse.algo.ts:23","pc":[75,76]},{"teal":67,"source":"contracts\\Algoverse.algo.ts:23","pc":[77,78]},{"teal":68,"source":"contracts\\Algoverse.algo.ts:23","pc":[79]},{"teal":71,"source":"contracts\\Algoverse.algo.ts:22","pc":[80]},{"teal":76,"source":"contracts\\Algoverse.algo.ts:35","pc":[81]},{"teal":79,"source":"contracts\\Algoverse.algo.ts:35","pc":[82,83,84]},{"teal":80,"source":"contracts\\Algoverse.algo.ts:35","pc":[85,86,87]},{"teal":83,"source":"contracts\\Algoverse.algo.ts:35","pc":[88,89,90]},{"teal":84,"source":"contracts\\Algoverse.algo.ts:35","pc":[91]},{"teal":87,"source":"contracts\\Algoverse.algo.ts:35","pc":[92,93,94]},{"teal":88,"source":"contracts\\Algoverse.algo.ts:35","pc":[95]},{"teal":91,"source":"contracts\\Algoverse.algo.ts:35","pc":[96,97,98]},{"teal":92,"source":"contracts\\Algoverse.algo.ts:35","pc":[99]},{"teal":93,"source":"contracts\\Algoverse.algo.ts:35","pc":[100]},{"teal":94,"source":"contracts\\Algoverse.algo.ts:35","pc":[101]},{"teal":95,"source":"contracts\\Algoverse.algo.ts:35","pc":[102]},{"teal":96,"source":"contracts\\Algoverse.algo.ts:35","pc":[103]},{"teal":108,"source":"contracts\\Algoverse.algo.ts:35","pc":[104,105,106]},{"teal":111,"source":"contracts\\Algoverse.algo.ts:35","pc":[107,108]},{"teal":116,"source":"contracts\\Algoverse.algo.ts:38","pc":[109,110]},{"teal":117,"source":"contracts\\Algoverse.algo.ts:38","pc":[111,112,113,114,115]},{"teal":118,"source":"contracts\\Algoverse.algo.ts:38","pc":[116]},{"teal":119,"source":"contracts\\Algoverse.algo.ts:38","pc":[117,118,119]},{"teal":124,"source":"contracts\\Algoverse.algo.ts:39","pc":[120,121]},{"teal":125,"source":"contracts\\Algoverse.algo.ts:39","pc":[122,123]},{"teal":126,"source":"contracts\\Algoverse.algo.ts:39","pc":[124,125,126]},{"teal":127,"source":"contracts\\Algoverse.algo.ts:39","pc":[127,128]},{"teal":128,"source":"contracts\\Algoverse.algo.ts:38","pc":[129,130,131]},{"teal":133,"source":"contracts\\Algoverse.algo.ts:40","pc":[132,133]},{"teal":134,"source":"contracts\\Algoverse.algo.ts:40","pc":[134,135,136,137,138,139,140,141,142,143,144,145]},{"teal":135,"source":"contracts\\Algoverse.algo.ts:40","pc":[146]},{"teal":136,"source":"contracts\\Algoverse.algo.ts:40","pc":[147,148,149]},{"teal":141,"source":"contracts\\Algoverse.algo.ts:41","pc":[150,151]},{"teal":142,"source":"contracts\\Algoverse.algo.ts:41","pc":[152,153]},{"teal":143,"source":"contracts\\Algoverse.algo.ts:41","pc":[154,155,156]},{"teal":144,"source":"contracts\\Algoverse.algo.ts:41","pc":[157,158]},{"teal":145,"source":"contracts\\Algoverse.algo.ts:40","pc":[159,160,161]},{"teal":149,"source":"contracts\\Algoverse.algo.ts:42","errorMessage":"Invalid operation","pc":[162]},{"teal":154,"source":"contracts\\Algoverse.algo.ts:44","pc":[163,164]},{"teal":157,"source":"contracts\\Algoverse.algo.ts:35","pc":[165,166]},{"teal":158,"source":"contracts\\Algoverse.algo.ts:35","pc":[167]},{"teal":163,"source":"contracts\\Algoverse.algo.ts:54","pc":[168]},{"teal":166,"source":"contracts\\Algoverse.algo.ts:54","pc":[169,170,171]},{"teal":167,"source":"contracts\\Algoverse.algo.ts:54","pc":[172,173,174]},{"teal":170,"source":"contracts\\Algoverse.algo.ts:54","pc":[175,176,177]},{"teal":171,"source":"contracts\\Algoverse.algo.ts:54","pc":[178]},{"teal":172,"source":"contracts\\Algoverse.algo.ts:54","pc":[179]},{"teal":173,"source":"contracts\\Algoverse.algo.ts:54","pc":[180]},{"teal":174,"source":"contracts\\Algoverse.algo.ts:54","pc":[181,182,183]},{"teal":175,"source":"contracts\\Algoverse.algo.ts:54","pc":[184]},{"teal":176,"source":"contracts\\Algoverse.algo.ts:54","pc":[185]},{"teal":177,"source":"contracts\\Algoverse.algo.ts:54","pc":[186]},{"teal":178,"source":"contracts\\Algoverse.algo.ts:54","pc":[187]},{"teal":179,"source":"contracts\\Algoverse.algo.ts:54","pc":[188]},{"teal":180,"source":"contracts\\Algoverse.algo.ts:54","pc":[189]},{"teal":190,"source":"contracts\\Algoverse.algo.ts:54","pc":[190,191,192]},{"teal":194,"source":"contracts\\Algoverse.algo.ts:55","pc":[193,194,195,196,197,198,199,200,201]},{"teal":195,"source":"contracts\\Algoverse.algo.ts:55","pc":[202,203]},{"teal":196,"source":"contracts\\Algoverse.algo.ts:55","pc":[204]},{"teal":197,"source":"contracts\\Algoverse.algo.ts:54","pc":[205]},{"teal":200,"source":"contracts\\Algoverse.algo.ts:3","pc":[206]},{"teal":201,"source":"contracts\\Algoverse.algo.ts:3","pc":[207]},{"teal":204,"source":"contracts\\Algoverse.algo.ts:3","pc":[208,209,210,211,212,213]},{"teal":205,"source":"contracts\\Algoverse.algo.ts:3","pc":[214,215,216]},{"teal":206,"source":"contracts\\Algoverse.algo.ts:3","pc":[217,218,219,220]},{"teal":209,"source":"contracts\\Algoverse.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[221]},{"teal":212,"source":"contracts\\Algoverse.algo.ts:3","pc":[222,223,224,225,226,227]},{"teal":213,"source":"contracts\\Algoverse.algo.ts:3","pc":[228,229,230,231,232,233]},{"teal":214,"source":"contracts\\Algoverse.algo.ts:3","pc":[234,235,236]},{"teal":215,"source":"contracts\\Algoverse.algo.ts:3","pc":[237,238,239,240,241,242]},{"teal":218,"source":"contracts\\Algoverse.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[243]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxCmJ5dGVjYmxvY2sgMHgxNTFmN2M3NQoKLy8gVGhpcyBURUFMIHdhcyBnZW5lcmF0ZWQgYnkgVEVBTFNjcmlwdCB2MC4xMDYuMwovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKcHVzaGludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGdldFN1bShhOiB1aW50NjQsIGI6IHVpbnQ2NCk6IHVpbnQ2NAovLwovLyBDYWxjdWxhdGVzIHRoZSBzdW0gb2YgdHdvIG51bWJlcnMKLy8KLy8gQHBhcmFtIGEKLy8gQHBhcmFtIGIKLy8gQHJldHVybnMgVGhlIHN1bSBvZiBhIGFuZCBiCmdldFN1bToKCXByb3RvIDIgMQoKCS8vIGNvbnRyYWN0c1xBbGdvdmVyc2UuYWxnby50czoxMgoJLy8gcmV0dXJuIGEgKyBiOwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIGI6IHVpbnQ2NAoJKwoJcmV0c3ViCgovLyBnZXREaWZmZXJlbmNlKGE6IHVpbnQ2NCwgYjogdWludDY0KTogdWludDY0Ci8vCi8vIENhbGN1bGF0ZXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gbnVtYmVycwovLwovLyBAcGFyYW0gYQovLyBAcGFyYW0gYgovLyBAcmV0dXJucyBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGEgYW5kIGIuCmdldERpZmZlcmVuY2U6Cglwcm90byAyIDEKCgkvLyBjb250cmFjdHNcQWxnb3ZlcnNlLmFsZ28udHM6MjMKCS8vIHJldHVybiBhID49IGIgPyBhIC0gYiA6IGIgLSBhOwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIGI6IHVpbnQ2NAoJPj0KCWJ6ICp0ZXJuYXJ5MF9mYWxzZQoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIGI6IHVpbnQ2NAoJLQoJYiAqdGVybmFyeTBfZW5kCgoqdGVybmFyeTBfZmFsc2U6CglmcmFtZV9kaWcgLTIgLy8gYjogdWludDY0CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0CgktCgoqdGVybmFyeTBfZW5kOgoJcmV0c3ViCgovLyBkb01hdGgodWludDY0LHVpbnQ2NCxzdHJpbmcpdWludDY0CiphYmlfcm91dGVfZG9NYXRoOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAwIC8vIDB4MTUxZjdjNzUKCgkvLyBvcGVyYXRpb246IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZXh0cmFjdCAyIDAKCgkvLyBiOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBhOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGRvTWF0aCh1aW50NjQsdWludDY0LHN0cmluZyl1aW50NjQKCWNhbGxzdWIgZG9NYXRoCglpdG9iCgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZG9NYXRoKGE6IHVpbnQ2NCwgYjogdWludDY0LCBvcGVyYXRpb246IHN0cmluZyk6IHVpbnQ2NAovLwovLyBBIG1ldGhvZCB0aGF0IHRha2VzIHR3byBudW1iZXJzIGFuZCBkb2VzIGVpdGhlciBhZGRpdGlvbiBvciBzdWJ0cmFjdGlvbgovLwovLyBAcGFyYW0gYSBUaGUgZmlyc3QgdWludDY0Ci8vIEBwYXJhbSBiIFRoZSBzZWNvbmQgdWludDY0Ci8vIEBwYXJhbSBvcGVyYXRpb24gVGhlIG9wZXJhdGlvbiB0byBwZXJmb3JtLiBDYW4gYmUgZWl0aGVyICdzdW0nIG9yICdkaWZmZXJlbmNlJwovLwovLyBAcmV0dXJucyBUaGUgcmVzdWx0IG9mIHRoZSBvcGVyYXRpb24KZG9NYXRoOgoJcHJvdG8gMyAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCXB1c2hieXRlcyAweAoKCS8vICppZjBfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQWxnb3ZlcnNlLmFsZ28udHM6MzgKCS8vIG9wZXJhdGlvbiA9PT0gJ3N1bScKCWZyYW1lX2RpZyAtMyAvLyBvcGVyYXRpb246IHN0cmluZwoJcHVzaGJ5dGVzIDB4NzM3NTZkIC8vICJzdW0iCgk9PQoJYnogKmlmMF9lbHNlaWYxX2NvbmRpdGlvbgoKCS8vICppZjBfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXEFsZ292ZXJzZS5hbGdvLnRzOjM5CgkvLyByZXN1bHQgPSB0aGlzLmdldFN1bShhLCBiKQoJZnJhbWVfZGlnIC0yIC8vIGI6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NAoJY2FsbHN1YiBnZXRTdW0KCWZyYW1lX2J1cnkgMCAvLyByZXN1bHQ6IHVpbnQ2NAoJYiAqaWYwX2VuZAoKKmlmMF9lbHNlaWYxX2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0c1xBbGdvdmVyc2UuYWxnby50czo0MAoJLy8gb3BlcmF0aW9uID09PSAnZGlmZmVyZW5jZScKCWZyYW1lX2RpZyAtMyAvLyBvcGVyYXRpb246IHN0cmluZwoJcHVzaGJ5dGVzIDB4NjQ2OTY2NjY2NTcyNjU2ZTYzNjUgLy8gImRpZmZlcmVuY2UiCgk9PQoJYnogKmlmMF9lbHNlCgoJLy8gKmlmMF9lbHNlaWYxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xBbGdvdmVyc2UuYWxnby50czo0MQoJLy8gcmVzdWx0ID0gdGhpcy5nZXREaWZmZXJlbmNlKGEsIGIpCglmcmFtZV9kaWcgLTIgLy8gYjogdWludDY0CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0CgljYWxsc3ViIGdldERpZmZlcmVuY2UKCWZyYW1lX2J1cnkgMCAvLyByZXN1bHQ6IHVpbnQ2NAoJYiAqaWYwX2VuZAoKKmlmMF9lbHNlOgoJLy8gSW52YWxpZCBvcGVyYXRpb24KCWVycgoKKmlmMF9lbmQ6CgkvLyBjb250cmFjdHNcQWxnb3ZlcnNlLmFsZ28udHM6NDQKCS8vIHJldHVybiByZXN1bHQ7CglmcmFtZV9kaWcgMCAvLyByZXN1bHQ6IHVpbnQ2NAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyBoZWxsbyhzdHJpbmcpc3RyaW5nCiphYmlfcm91dGVfaGVsbG86CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDAgLy8gMHgxNTFmN2M3NQoKCS8vIG5hbWU6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIGhlbGxvKHN0cmluZylzdHJpbmcKCWNhbGxzdWIgaGVsbG8KCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gaGVsbG8obmFtZTogc3RyaW5nKTogc3RyaW5nCi8vCi8vIEEgZGVtb25zdHJhdGlvbiBtZXRob2QgdXNlZCBpbiB0aGUgQWxnb0tpdCBmdWxsc3RhY2sgdGVtcGxhdGUuCi8vIEdyZWV0cyB0aGUgdXNlciBieSBuYW1lLgovLwovLyBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgdXNlciB0byBncmVldC4KLy8gQHJldHVybnMgQSBncmVldGluZyBtZXNzYWdlIHRvIHRoZSB1c2VyLgpoZWxsbzoKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0c1xBbGdvdmVyc2UuYWxnby50czo1NQoJLy8gcmV0dXJuICdIZWxsbywgJyArIG5hbWU7CglwdXNoYnl0ZXMgMHg0ODY1NmM2YzZmMmMyMCAvLyAiSGVsbG8sICIKCWZyYW1lX2RpZyAtMSAvLyBuYW1lOiBzdHJpbmcKCWNvbmNhdAoJcmV0c3ViCgoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJaW50YyAwIC8vIDEKCXJldHVybgoKKmNyZWF0ZV9Ob09wOgoJcHVzaGJ5dGVzIDB4Yjg0NDdiMzYgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY3JlYXRlIE5vT3AKCWVycgoKKmNhbGxfTm9PcDoKCXB1c2hieXRlcyAweDc2YTdlZjMzIC8vIG1ldGhvZCAiZG9NYXRoKHVpbnQ2NCx1aW50NjQsc3RyaW5nKXVpbnQ2NCIKCXB1c2hieXRlcyAweDAyYmVjZTExIC8vIG1ldGhvZCAiaGVsbG8oc3RyaW5nKXN0cmluZyIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfZG9NYXRoICphYmlfcm91dGVfaGVsbG8KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnI=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiABASYBBBUffHUxGBSBBgsxGQiNDACwAAAAAAAAAAAAAACiAAAAAAAAAAAAAACKAgGL/4v+CImKAgGL/4v+D0EACIv/i/4JQgAFi/6L/wmJKDYaA1cCADYaAhc2GgEXiAAFFlCwIkOKAwGAAIv9gANzdW0SQQAMi/6L/4j/sIwAQgAfi/2ACmRpZmZlcmVuY2USQQAMi/6L/4j/m4wAQgABAIsAjACJKDYaAVcCAIgADEkVFlcGAkxQULAiQ4oBAYAHSGVsbG8sIIv/UIkiQ4AEuER7NjYaAI4B//EAgAR2p+8zgAQCvs4RNhoAjgL/Xv+1AA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":1,"commitHash":"63d271cf"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

class ABIReturn {
  value: ABIReturnValue

  constructor(value: ABIReturnValue) {
    this.value = value
  }

  asUint8Array(): Uint8Array | undefined {
    return this.value
  }

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Algoverse contract
 */
export type AlgoverseArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'doMath(uint64,uint64,string)uint64': {
      /**
       * The first uint64
       */
      a: bigint | number
      /**
       * The second uint64
       */
      b: bigint | number
      /**
       * The operation to perform. Can be either 'sum' or 'difference'
       */
      operation: string
    }
    'hello(string)string': {
      /**
       * The name of the user to greet.
       */
      name: string
    }
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'doMath(uint64,uint64,string)uint64': [a: bigint | number, b: bigint | number, operation: string]
    'hello(string)string': [name: string]
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type AlgoverseReturns = {
  'doMath(uint64,uint64,string)uint64': bigint
  'hello(string)string': string
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the Algoverse smart contract.
 */
export type AlgoverseTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'doMath(uint64,uint64,string)uint64' | 'doMath', {
      argsObj: AlgoverseArgs['obj']['doMath(uint64,uint64,string)uint64']
      argsTuple: AlgoverseArgs['tuple']['doMath(uint64,uint64,string)uint64']
      /**
       * The result of the operation
       */
      returns: AlgoverseReturns['doMath(uint64,uint64,string)uint64']
    }>
    & Record<'hello(string)string' | 'hello', {
      argsObj: AlgoverseArgs['obj']['hello(string)string']
      argsTuple: AlgoverseArgs['tuple']['hello(string)string']
      /**
       * A greeting message to the user.
       */
      returns: AlgoverseReturns['hello(string)string']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: AlgoverseArgs['obj']['createApplication()void']
      argsTuple: AlgoverseArgs['tuple']['createApplication()void']
      returns: AlgoverseReturns['createApplication()void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type AlgoverseSignatures = keyof AlgoverseTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AlgoverseNonVoidMethodSignatures = keyof AlgoverseTypes['methods'] extends infer T ? T extends keyof AlgoverseTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Algoverse smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AlgoverseSignatures> = AlgoverseTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Algoverse smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgoverseSignatures> = AlgoverseTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type AlgoverseCreateCallParams =
  | Expand<CallParams<AlgoverseArgs['obj']['createApplication()void'] | AlgoverseArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AlgoverseArgs['obj']['createApplication()void'] | AlgoverseArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AlgoverseDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AlgoverseCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Algoverse smart contract
 */
export abstract class AlgoverseParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AlgoverseCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return AlgoverseParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Algoverse smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AlgoverseArgs['obj']['createApplication()void'] | AlgoverseArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the doMath(uint64,uint64,string)uint64 ABI method
   *
   * A method that takes two numbers and does either addition or subtraction
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doMath(params: CallParams<AlgoverseArgs['obj']['doMath(uint64,uint64,string)uint64'] | AlgoverseArgs['tuple']['doMath(uint64,uint64,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'doMath(uint64,uint64,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a, params.args.b, params.args.operation],
    }
  }
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
  * A demonstration method used in the AlgoKit fullstack template.
  Greets the user by name.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<AlgoverseArgs['obj']['hello(string)string'] | AlgoverseArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Algoverse smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AlgoverseFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AlgoverseFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AlgoverseClient(this.appFactory.getAppClientById(params))
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AlgoverseClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Algoverse smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AlgoverseDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AlgoverseParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AlgoverseCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AlgoverseClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Algoverse smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AlgoverseArgs['obj']['createApplication()void'] | AlgoverseArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(AlgoverseParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Algoverse smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AlgoverseArgs['obj']['createApplication()void'] | AlgoverseArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(AlgoverseParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Algoverse smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AlgoverseArgs['obj']['createApplication()void'] | AlgoverseArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(AlgoverseParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AlgoverseReturns['createApplication()void']) }, appClient: new AlgoverseClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Algoverse smart contract
 */
export class AlgoverseClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AlgoverseClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Algoverse app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AlgoverseClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AlgoverseNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `AlgoverseClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AlgoverseClient> {
    return new AlgoverseClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }

  /**
   * Returns an `AlgoverseClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AlgoverseClient> {
    return new AlgoverseClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Algoverse smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Algoverse smart contract using the `doMath(uint64,uint64,string)uint64` ABI method.
     *
     * A method that takes two numbers and does either addition or subtraction
     *
     * @param params The params for the smart contract call
     * @returns The call params: The result of the operation
     */
    doMath: (params: CallParams<AlgoverseArgs['obj']['doMath(uint64,uint64,string)uint64'] | AlgoverseArgs['tuple']['doMath(uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoverseParamsFactory.doMath(params))
    },

    /**
     * Makes a call to the Algoverse smart contract using the `hello(string)string` ABI method.
     *
    * A demonstration method used in the AlgoKit fullstack template.
    Greets the user by name.

     *
     * @param params The params for the smart contract call
     * @returns The call params: A greeting message to the user.
     */
    hello: (params: CallParams<AlgoverseArgs['obj']['hello(string)string'] | AlgoverseArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoverseParamsFactory.hello(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Algoverse smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Algoverse smart contract using the `doMath(uint64,uint64,string)uint64` ABI method.
     *
     * A method that takes two numbers and does either addition or subtraction
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The result of the operation
     */
    doMath: (params: CallParams<AlgoverseArgs['obj']['doMath(uint64,uint64,string)uint64'] | AlgoverseArgs['tuple']['doMath(uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoverseParamsFactory.doMath(params))
    },

    /**
     * Makes a call to the Algoverse smart contract using the `hello(string)string` ABI method.
     *
    * A demonstration method used in the AlgoKit fullstack template.
    Greets the user by name.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: A greeting message to the user.
     */
    hello: (params: CallParams<AlgoverseArgs['obj']['hello(string)string'] | AlgoverseArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoverseParamsFactory.hello(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Algoverse smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Algoverse smart contract using the `doMath(uint64,uint64,string)uint64` ABI method.
     *
     * A method that takes two numbers and does either addition or subtraction
     *
     * @param params The params for the smart contract call
     * @returns The call result: The result of the operation
     */
    doMath: async (params: CallParams<AlgoverseArgs['obj']['doMath(uint64,uint64,string)uint64'] | AlgoverseArgs['tuple']['doMath(uint64,uint64,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoverseParamsFactory.doMath(params))
      return {...result, return: result.return as unknown as (undefined | AlgoverseReturns['doMath(uint64,uint64,string)uint64'])}
    },

    /**
     * Makes a call to the Algoverse smart contract using the `hello(string)string` ABI method.
     *
    * A demonstration method used in the AlgoKit fullstack template.
    Greets the user by name.

     *
     * @param params The params for the smart contract call
     * @returns The call result: A greeting message to the user.
     */
    hello: async (params: CallParams<AlgoverseArgs['obj']['hello(string)string'] | AlgoverseArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoverseParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | AlgoverseReturns['hello(string)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AlgoverseClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Algoverse app
   */
  state = {
  }

  public newGroup(): AlgoverseComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a doMath(uint64,uint64,string)uint64 method call against the Algoverse contract
       */
      doMath(params: CallParams<AlgoverseArgs['obj']['doMath(uint64,uint64,string)uint64'] | AlgoverseArgs['tuple']['doMath(uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doMath(params)))
        resultMappers.push((v) => client.decodeReturnValue('doMath(uint64,uint64,string)uint64', v))
        return this
      },
      /**
       * Add a hello(string)string method call against the Algoverse contract
       */
      hello(params: CallParams<AlgoverseArgs['obj']['hello(string)string'] | AlgoverseArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a clear state call to the Algoverse contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AlgoverseComposer
  }
}
export type AlgoverseComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the doMath(uint64,uint64,string)uint64 ABI method.
   *
   * A method that takes two numbers and does either addition or subtraction
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doMath(params?: CallParams<AlgoverseArgs['obj']['doMath(uint64,uint64,string)uint64'] | AlgoverseArgs['tuple']['doMath(uint64,uint64,string)uint64']>): AlgoverseComposer<[...TReturns, AlgoverseReturns['doMath(uint64,uint64,string)uint64'] | undefined]>

  /**
   * Calls the hello(string)string ABI method.
   *
  * A demonstration method used in the AlgoKit fullstack template.
  Greets the user by name.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<AlgoverseArgs['obj']['hello(string)string'] | AlgoverseArgs['tuple']['hello(string)string']>): AlgoverseComposer<[...TReturns, AlgoverseReturns['hello(string)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Algoverse smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AlgoverseComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AlgoverseComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AlgoverseComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AlgoverseComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AlgoverseComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AlgoverseComposerResults<TReturns>>
}
export type AlgoverseComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

